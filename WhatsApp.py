import telebot
from telebot import types
import time

global block
block = 0
global blck


# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
TOKEN = '7587992589:AAFPtTAk2QlRgmuRw85YVbuw4DML2d70_GE'
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
user_questions = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):

    

    global user_id
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìû –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä")
    markup.add(btn1)
    
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Å–¥–∞—á–∏ –Ω–æ–º–µ—Ä–æ–≤ –≤–∞—Ç—Å–∞–ø.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == "üìû –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä")
def contact_support(message):


    markup = types.ReplyKeyboardRemove()
    bot.send_message(
        message.chat.id,
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ–≥–¥–∞ –µ–≥–æ –≤–æ–∑—å–º—É—Ç –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–º–µ–¥–æ–≤–ª–µ–Ω–∏–µ:",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, save_question)

def save_question(message):
    user_questions[message.chat.id] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("‚úÖ –î–∞")
    btn2 = types.KeyboardButton("‚ùå –ù–µ—Ç")
    markup.add(btn1, btn2)
    
    bot.send_message(
        message.chat.id,
        f"–í–∞—à –Ω–æ–º–µ—Ä: *{message.text}*\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    bot.register_next_step_handler(message, confirm_question)

def confirm_question(message):
    if message.text == "‚úÖ –î–∞":
        bot.send_message(
            message.chat.id,
            "‚úÖ –í–∞—à –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω—É
        global admin_chat_id
        admin_chat_id = "7783847586"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∞
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("–í–∑—è—Ç—å", callback_data=f"reply_{message.chat.id}_{message.message_id}")
        btn1 = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", callback_data=f"code{message.chat.id}_{message.message_id}")
        btn2 = types.InlineKeyboardButton("–í—ã—Å—Ç–æ—è–ª", callback_data=f"sucessfully{message.chat.id}_{message.message_id}")
        btn3 = types.InlineKeyboardButton("–í—ã—Å–ª–∞—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"oplatit{message.chat.id}_{message.message_id}")
        markup.add(btn, btn1, btn2, btn3)
        bot.send_message(
            admin_chat_id,
            f"–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. {message.chat.id}:\n\n{user_questions[message.chat.id]}", reply_markup=markup
        )

        bot.register_next_step_handler(message, save_question)


@bot.callback_query_handler(func=lambda call: call.data.startswith("reply_"))
def handle_button_click(call):
    code(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("code"))
def handle_button_click(call):
    save_answer(call.message)
@bot.callback_query_handler(func=lambda call: call.data.startswith("sucessfully"))
def handle_button_click(call):
    sucessful(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("oplatit"))
def handle_button_click(call):
    oplata(call.message)

def oplata(message):
    bot.send_message(admin_chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫:")
    bot.register_next_step_handler(message, check)

def check(message):
    c = message.text
    bot.send_message(user_id, f"–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞: {c}")
def sucessful(message):
    bot.send_message(admin_chat_id, f"–í—ã –ø–æ–¥–∞–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥—Ä–æ–ø—É —Å –Ω–æ–º–µ—Ä–æ–º {user_questions} –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –≤—ã—Å—Ç–æ—è–ª. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã—Å–ª–∞—Ç—å –æ–ø–ª–∞—Ç—É.")
    bot.send_message(user_id, f"–í–∞—à –Ω–æ–º–µ—Ä –≤—ã—Å—Ç–æ—è–ª! –û–∂–∏–¥–∞–π—Ç–µ –æ–ø–ª–∞—Ç—É.")

def code(message):
    bot.send_message(admin_chat_id, f"–ù–æ–º–µ—Ä {user_questions} –≤–∑—è—Ç! (–î—Ä–æ–ø—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
    bot.send_message(user_id, f"–í–∞—à –Ω–æ–º–µ—Ä –≤–∑—è—Ç! –æ–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥!")

def save_answer(message):
    bot.send_message(admin_chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥:")
    bot.register_next_step_handler(message, hser)

def hser(message):
    x = message.text
    bot.send_message(user_id, f"–ö–æ–¥:{x}")


    


bot.polling(non_stop=True)